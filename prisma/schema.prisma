// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ClientParts {
  id            String   @id @default(cuid())
  name          String
  phone         String
  vin           String
  IntSpareParts String
  comment       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ClientNeedCall {
  id        String   @id @default(cuid())
  name      String
  phone     String
  office    String
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CalcCredit {
  id         String   @id @default(cuid())
  name       String
  phone      String
  firstPrice String
  carName    String
  month      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CalcInsurance {
  id                 String   @id @default(cuid())
  name               String
  phone              String
  equipment          String
  year               String
  power              String
  carNumber          String
  city               String
  carBrendName       String
  carModel           String
  price              String
  officeName         String
  insuranceTypeKASKO Boolean
  insuranceTypeOSAGO Boolean
  alarmSystem        Boolean
  carDeposit         Boolean
  installmentPlan    Boolean
  drivers            Json[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model ClientTradein {
  id        String   @id @default(cuid())
  name      String
  phone     String
  carYear   String
  carModal  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id           String    @id @default(cuid())
  login        String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  sessions     Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  adminId      String
  admin        Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model SessionClient {
  id               String                  @id @default(cuid())
  sessionToken     String                  @unique
  expires          DateTime
  favoriteCars     FavoriteCarsToCar[]
  favoriteUsedCars FavoriteUsedCarsToCar[]
  watchedCars      WatchedCarsToCar[]
  watchedUsedCars  WatchedUsedCarsToCar[]
  compareCars      CompareCarsToCar[]
  compareUsedCars  CompareUsedCarsToCar[]
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  // Car          Car?                @relation(fields: [carId], references: [id])
  // carId        String?
}

model FavoriteCarsToCar {
  session   SessionClient @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
  car       Car           @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId     String

  @@id([sessionId, carId])
}

model FavoriteUsedCarsToCar {
  session   SessionClient @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
  car       UsedCars      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId     String

  @@id([sessionId, carId])
}

model WatchedCarsToCar {
  session   SessionClient @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
  car       Car           @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId     String

  @@id([sessionId, carId])
}

model WatchedUsedCarsToCar {
  session   SessionClient @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
  car       UsedCars      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId     String

  @@id([sessionId, carId])
}

model CompareCarsToCar {
  session   SessionClient @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
  car       Car           @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId     String

  @@id([sessionId, carId])
}

model CompareUsedCarsToCar {
  session   SessionClient @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
  car       UsedCars      @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId     String

  @@id([sessionId, carId])
}

model Offer {
  id                String   @id @default(cuid())
  title             String
  shortDesc         String
  description       String?
  filterMainPeople  String? //фильтр (Новые авто, бу, владельцам)
  detailFilterBrand String?
  detailFilterMode  String?
  img               String?
  price             String?
  active            Boolean
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum FILTER1 {
  NEW
  OLD
  OWNER
}

enum Brand {
  CHERY
  EXEED
  HYUNDAI
  KIA
  MITSUBISHI
  NISSAN
  RENAULT
  VOLKSWAGEN
  UAZ
  SUBARU
  JAGUAR
  LANDROVER
  SUZUKI
  JEEP
  OPEL
  PEUGEOT
  FAW
  HISUN
  GEELY
  allCar
}

model DealerModel {
  id      String  @id @default(cuid())
  id_1c   Int     @unique //id дилера их 1С
  name    String?
  address String? //адрес ДЦ poe_id
  phone   String?
  cars    Car[]
}

model News {
  id        String      @id @default(cuid())
  name      String
  // brand     BrandNews[]
  shortName String
  desc      String
  img       String[]
  active    Boolean     @default(true)
}



model CarModel {
  id              String      @id @default(cuid())
  id_1c           Int //бренд id
  modelId_1c      Int         @unique
  brandName       String //бренд
  modelName       String
  categoryId_1c   Int //легковая или грузовая
  categoryIdName  String
  generationId_1c Int? //поколение 
  generationIName String? //
  cars            Car[]
  // brandNews       BrandNews[]
}

model CarModification {
  id            String  @id @default(cuid())
  id_1c         Int     @unique // modification
  name          String? // пример 2.0 AMT (197 л.с.) 4WD
  engineType    String? // тип двигателя и топливо
  engineVolume  String? // объем двигателя
  enginePower   String? // л.с двигателя
  gearboxType   String? //коробка передач 
  driveType     String? // привод
  bodyType      String? // тип кузова 
  bodyDoorCount Int? // кол. дверей
  steeringWheel String? // руль левый или правый 
  length        String? //длинна авто
  width         String? //ширина авто
  cars          Car[]
  // expenditure       String? //расход топлива
  // capacityTank      String? //объем бака
  //trunk             String? //тип багажника
  // volumeTrunk       String? //объем багажника
  // consumptionCombi  String? //расход смешанный
  // consumptionCity   String? //расход в городе
  // consumptionTrack  String? //расход на трассе
  // speedMax          String? //максимальная скорость
  // overlocking       String? //разгон сек
}

model CarComplectation {
  id       String  @id @default(cuid())
  id_1c    Int     @unique // сomplectation
  name     String // пример Sport Edition
  seatsCar String? //места колличество 
  cars     Car[]
}

model Extras {
  id        String @id @default(cuid())
  groupId   Int
  groupName String
  name      String @unique
  cars      Car[]
}

model Car {
  id                 String              @id @default(cuid())
  id_1c              String              @unique
  usedOrNew          String //новая или БУ
  color              String //цвет 
  bodyColorMetallic  String //цвет металик 
  mileage            String? //пробег
  mileageUnit        String? // единцы пробега  км или мили
  vin                String              @unique
  year               String? //год выпуска
  img                String[] // много картинок
  priceMonth         Float? //стоимость месяц
  price              Float? //стоимость всего
  special_price      Float? //спец цена
  specialOffer       Float? // спец предложение 
  tradeinDiscount    Float? // скидка трейд
  creditDiscount     Float? // скидка
  insuranceDiscount  Float? // скидка ?
  desc               String? //описание
  active             Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  // sessionClients     SessionClient[]
  CarModel           CarModel?           @relation(fields: [carModelId], references: [modelId_1c])
  carModelId         Int?
  extras             Extras[]
  CarModification    CarModification?    @relation(fields: [carModificationId], references: [id_1c])
  carModificationId  Int?
  CarComplectation   CarComplectation?   @relation(fields: [carComplectationId], references: [id_1c])
  carComplectationId Int?
  DealerModel        DealerModel?        @relation(fields: [dealerModelId], references: [id_1c])
  dealerModelId      Int?
  availability       String
  FavoriteCarsToCar  FavoriteCarsToCar[]
  WatchedCarsToCar   WatchedCarsToCar[]
  CompareCarsToCar   CompareCarsToCar[]
}

model UsedCars {
  id                    String                  @id @default(cuid())
  offersId              String                  @unique
  vendor                String //KIA
  modelFullName         String //Sorento 2.2d AMT (199 л.с.) 4WD 2020
  price                 Float? //цена
  enable_auto_discounts Boolean                 @default(false)
  currencyId            String?
  count                 String?
  categoryId            String?
  delivery              Boolean                 @default(false)
  pickup                Boolean                 @default(true)
  store                 Boolean                 @default(true)
  description           String?
  sales_notes           String?
  picture               String[] // много картинок
  typePrefix            String //новая или БУ
  manufacturer_warranty Boolean                 @default(false)
  url                   String? //ссылка на avto.ru
  mileage               String? //пробег
  year                  String? //год выпуска
  bodyType              String? //Внедорожник 5 дв.
  steeringWheel         String? // руль левый или правый 
  color                 String? //цвет
  pts                   String? //ПТС
  numberOfOwners        String? //количество владельцев
  engine                String? //дизель, 2.2 л, 199 л. с.
  driverType            String? // привод
  gearboxType           String? // коробка
  generation            String? //поколение
  modelShortName        String? //Sorento
  active                Boolean                 @default(true)
  FavoriteUsedCarsToCar FavoriteUsedCarsToCar[]
  WatchedUsedCarsToCar  WatchedUsedCarsToCar[]
  CompareUsedCarsToCar  CompareUsedCarsToCar[]
}

model Vacancy {
  id              String   @id @default(cuid())
  name            String //имя
  surname         String //фамилия
  patronymic      String //отчество
  phone           String //телефон
  salary          String //заработная плата
  companyName     String //опыт работы название 
  companyPosition String //опыт работы должность
  startData       String //опыт работы от
  endData         String //опыт работы до
  text            String? //причины увольнения
  textTwo         String? //пожелания
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Job {
  id          String   @id @default(cuid())
  title       String //должность
  description String //описание
  salary      String //зп
  // exp         Exp      @default(ZERO) //опыт работы 
  // office      Office   @default(ARKONT_GK) //ДЦ
  exp         String
  office      String
  city        City     @default(VLG) //город по умолчанию ВЛГ
  carBrend    String //бренд ДЦ
  active      Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Offices {
  id        String   @id @default(cuid())
  name      String?
  label     String?
  photo     String?
  city      String?
  address   String?
  phone     String?
  brend     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

//Таблица для динамических страниц брендов
model BrandNews {
  id          String   @id @default(cuid())
  title       String
  description  String?
  img          String[]
  // news        News[]
  brands      Brands[]
}



model Brands {
  id          String      @id @default(cuid())
  brand       String?
  banner      String?
  maps        YandexGeo[]
  description String?
  news        BrandNews[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model YandexGeo {
  id           String   @id @default(cuid())
  nameDc       String?
  imgDC        String?
  linkToYandex String?
  iframeMapSrc String?
  phone        String?
  adress       String?
  email        String?
  brand        Brands[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


enum City {
  VLG @map("Волгоград")
  VLZ @map("Волжский")
}

enum Office {
  ARKONT_GK      @map("ГК Арконт")
  ARKONT_VOLZSKY @map("Renault Арконт Волжский")
  ARKONT_KIA     @map("KIA Арконт")
  ARKONT_NISSAN  @map("Nissan Арконт")
}

enum Exp {
  ZERO     @map("Без опыта")
  BEGINNER @map("от 1 года")
  MIDDLE   @map("от 3 лет")
}
