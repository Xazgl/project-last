
import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import { useRef, useState } from 'react'
import { AllCarDto, CarDtoWithoutFavorite } from '../../@types/dto'
import db from '../../prisma'
import { NewCarComponent } from '../../src/component/actual/allNewCarPage/NewCarComponent'
import { FooterMain } from '../../src/component/actual/FooterMain'
import BarMenu from '../../src/component/BarMenu'
import { MenuBar } from '../../src/component/Menu'
import { Modal } from '../../src/component/Modal'
import { ModalFavorite } from '../../src/component/ModalFavorite'
import { TradeinModal } from '../../src/component/ModalTwo'
import { getDataFromRedis, redisClient } from '../../src/services/redis'


const AllNewCarPage: NextPage<{ cars: AllCarDto }> = ({ cars }) => {

  const [showModal, setShowModal] = useState(false)
  const [showTradeInModal, setShowTradeInModal] = useState(false)

  const [showModalFavorite, setShowModalFavorite] = useState(false)

  const refSales = useRef<HTMLDivElement>(null)
  const refTop = useRef<HTMLDivElement>(null)
  const refContact = useRef<HTMLDivElement>(null)
  const refAdvatages = useRef<HTMLDivElement>(null)
  const refFooter = useRef<HTMLDivElement>(null)
  const refForm = useRef<HTMLDivElement>(null)

  return (
    <>
      <Head>
        <title>АРКОНТ ОФИЦИАЛЬНЫЙ ДИЛЕР В ВОЛГОГРАДЕ</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MenuBar />
      <BarMenu />
      <NewCarComponent setShowModal={setShowModal} setShowModalFavorite={setShowModalFavorite} cars={cars} />
      <FooterMain setShowTradeInModal={setShowTradeInModal} refs={{ refFooter }} />

      {
        showModal && <Modal showModal={showModal} setShowModal={setShowModal} />
      }

      {
        showTradeInModal && <TradeinModal showTradeInModal={showTradeInModal} setShowTradeInModal={setShowTradeInModal} />
      }

      {
        showModalFavorite && <ModalFavorite showModalFavorite={showModalFavorite} setShowModalFavorite={setShowModalFavorite} cars={cars} />
      }
    </>
  )
}


export const getServerSideProps: GetServerSideProps = async (context) => {
  let cars: CarDtoWithoutFavorite[] = []; // Объявление переменной cars
  try {
    // Получаем данные из Redis и парсим их в массив объектов
    const carsData: string = await getDataFromRedis('cars');
    if (!carsData) {
      cars = await db.car.findMany(
        {
          where: {
            active: true,
          },
          include: {
            CarModel: true,
            CarComplectation: true,
            CarModification: true,
            extras: true,
            DealerModel: true,
          },
        }
      );
      // Сохраняем данные в Redis на день
      redisClient.set('cars', JSON.stringify(cars), 'EX', 86400);
      // redisClient.set('cars', JSON.stringify(cars, (key, value) => {
      //   if (key === 'createdAt') {
      //     return value.toISOString(); // преобразование даты в строку
      //   }
      //   return value;
      // }), 'EX', 86400);
    } else {
      cars = JSON.parse(carsData) as CarDtoWithoutFavorite[]; // Преобразование строки в массив объектов типа Car
    }
    // Устанавливаем заголовки Cache-Control и ETag
    context.res.setHeader('Cache-Control', 'public, max-age=86400'); // Максимальное время кэширования - 4 часа
    context.res.setHeader('ETag', 'some-unique-value'); // Уникальное значение ETag
    context.res.setHeader('X-XSS-Protection', '1; mode=block');
    context.res.setHeader('X-Frame-Options', 'SAMEORIGIN');
    context.res.setHeader('X-Content-Type-Options', 'nosniff');
    return {
      props: {
        cars
      },
    };
  } catch (error) {
    console.error('Error querying the database:', error);
    return {
      props: {
        cars: []
      },
    };
  }




  // try {
  //   const cars = await db.car.findMany(
  //     {
  //       where: {
  //         active: true,
  //       },
  //       include: {
  //         CarModel: true,
  //         CarComplectation: true,
  //         CarModification: true,
  //         extras: true,
  //         DealerModel: true,
  //       }
  //     }
  //   )

  //   // Устанавливаем заголовки Cache-Control и ETag
  //   context.res.setHeader('Cache-Control', 'public, max-age=14400'); // Максимальное время кэширования - 4 часа
  //   context.res.setHeader('ETag', 'some-unique-value'); // Уникальное значение ETag

  //   return {
  //     props: {
  //       cars: JSON.parse(JSON.stringify(cars)),
  //     }
  //   }
  // } catch (error) {
  //   console.error('Error querying the database:', error);
  //   return {
  //     props: {
  //       cars: [],
  //     },
  //   };
  // }
}

export default AllNewCarPage




