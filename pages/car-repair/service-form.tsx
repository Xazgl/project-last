
import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import { useRef, useState } from 'react'
import db, { Offer } from '../../prisma'
import { FooterMain } from '../../src/component/actual/FooterMain'
import { ServiceForm } from '../../src/component/actual/serviceCarPage/ServiceForm'
import { CardsSpecialOffers } from '../../src/component/actual/specialOffers/CardsSpecialOffers'
import BarMenu from '../../src/component/BarMenu'
import { MenuBar } from '../../src/component/Menu'
import { Modal } from '../../src/component/Modal'
import { TradeinModal } from '../../src/component/ModalTwo'
import { getDataFromRedis, getRedisInstance } from '../../src/services/redis'
import { ServiceBanner } from '../../src/component/actual/serviceCarPage/ServiceBanner'
import { FooterMainNew } from '../../src/component/actual/menuNew/FooterMain'
import { Calc } from '../../src/component/actual/oilPage/Calc'
import { BannerService } from '../../src/component/actual/serviceCarPage/BannerService'
import { MenuBarNew } from '../../src/component/actual/menuNew/Menu'


const ServicePage: NextPage<{ offers: Offer[] }> = ({ offers }) => {

  const [showModal, setShowModal] = useState(false)
  const [showTradeInModal, setShowTradeInModal] = useState(false)
  const refSales = useRef<HTMLDivElement>(null)
  const refTop = useRef<HTMLDivElement>(null)
  const refContact = useRef<HTMLDivElement>(null)
  const refAdvatages = useRef<HTMLDivElement>(null)
  const refFooter = useRef<HTMLDivElement>(null)
  const refForm = useRef<HTMLDivElement>(null)

  return (
    <>
      <Head>
        <title>АРКОНТ ЗАПИСЬ НА СЕРВИС</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <BarMenu />
      <MenuBarNew setShowModal={setShowModal} />

      {/* <ServiceBanner refs={{ refForm }} /> */}
      <div className='background'>
        <div className='content'>
          <BannerService refs={{ refForm }} />
          <ServiceForm refs={{ refForm }} />
          {offers.length > 0 &&
            <CardsSpecialOffers setShowModal={setShowModal} offers={offers} />
          }
          <Calc setShowModal={setShowModal} />
        </div>
      </div >
      <FooterMainNew setShowModal={setShowModal} refs={{ refFooter }} />

      {
        showModal && <Modal showModal={showModal} setShowModal={setShowModal} />
      }

      {
        showTradeInModal && <TradeinModal showTradeInModal={showTradeInModal} setShowTradeInModal={setShowTradeInModal} />
      }
      <style jsx>
        {` 
          .background {
            display: flex; 
            justify-content: center;
            width: '100%' ;
          }
  
          .content {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 1179px; 
          }

          .title {
            display: flex;
            justify-content: start;
            width: 100%;
            font-family: 'Roboto',sans-serif;
            margin-top: 20px;
            font-size: 25px;
            font-weight: bold;
          }

          @media(max-width: 1300px) {
            .content {  
              width: 970px; 
            }
          }

          @media(max-width: 900px) {
            .content{  
              width: 640px; 
            }
          }

          @media(max-width: 640px) {
            .content{  
              width: 450px; 
            }
            .title {
              justify-content: center;
            }
          }    
          
          @media(max-width: 450px) {
            .content{  
              width: 360px; 
            }
          }

          @media(max-width: 360px) {
            .background {
              padding-left: 10px;
              padding-right: 10px;
            }
            .content{  
              width:90%; 
            }
          }

        `}
      </style>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  let offers: Offer[] = []; // Объявление переменной 
  try {
    // Получаем данные из Redis и парсим их в массив объектов
    const offersData: string = await getDataFromRedis('offers');
    if (!offersData) {
      offers = await db.offer.findMany({
        where: {
          active: true
        }
      })
      // Сохраняем данные в Redis на день
      // getRedisInstance().set('offers', JSON.stringify(offers), 'EX',10);
      getRedisInstance().set('offers', JSON.stringify(offers, (key, value) => {
        if (key === 'createdAt') {
          return new Date(value).toISOString(); // преобразование даты в строку
        }
        return value;
      }), 'EX', 86400);
    } else {
      offers = JSON.parse(offersData) as Offer[]; // Преобразование строки в массив объектов типа Car
    }
    // Устанавливаем заголовки Cache-Control и ETag
    context.res.setHeader('Cache-Control', 'public'); // Максимальное время кэширования - 4 часа
    context.res.setHeader('ETag', 'some-unique-value'); // Уникальное значение ETag
    // Защита от атак XSS
    context.res.setHeader('X-XSS-Protection', '1; mode=block');
    // Защита от клик-джекинга
    context.res.setHeader('X-Frame-Options', 'SAMEORIGIN');
    // Защита от MIME-типа сниффинга
    context.res.setHeader('X-Content-Type-Options', 'nosniff');
    return {
      props: {
        offers
      },
    };
  } catch (error) {
    console.error('Error querying the database:', error);
    return {
      props: {
        offers: []
      },
    };
  }

}


export default ServicePage





