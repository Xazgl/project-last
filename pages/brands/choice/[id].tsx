
import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useRef, useState } from 'react'
import { AllCarDto, BrandPageDto, CarDtoWithoutFavorite } from '../../../@types/dto'
import db from '../../../prisma'
import BarMenu from '../../../src/component/BarMenu'
import { Modal } from '../../../src/component/Modal'
import { ModalFavorite } from '../../../src/component/ModalFavorite'
import { TradeinModal } from '../../../src/component/ModalTwo'
import { GeelyImgDestop } from '../../../src/component/actual/brendsPages/geely/banner/GeelyImg'
import { MenuBarNew } from '../../../src/component/actual/menuNew/Menu'
import { FooterMainNew } from '../../../src/component/actual/menuNew/FooterMain'
import { Box, CircularProgress, Grow, Paper } from '@mui/material'
import router, { useRouter } from 'next/router'
import { BannerBrand } from '../../../src/component/actual/brendsPages/dynamicPage/banner/BannerBrand'
import { FilterWithPageComponentDynamic } from '../../../src/component/actual/brendsPages/dynamicPage/FilterWithPageComponentDynamic'


type Brand = {
  brandName: string;
  count: string
}

const BrandPage: NextPage<{ cars: AllCarDto, brands: Brand[] }> = ({ cars, brands }) => {
  const [showModal, setShowModal] = useState(false)
  const [showTradeInModal, setShowTradeInModal] = useState(false)
  const [showModalFavorite, setShowModalFavorite] = useState(false)
  const refFooter = useRef<HTMLDivElement>(null)
  const router = useRouter()

  const [brand, setBrand] = useState<BrandPageDto>()
  const [banner, setBanner] = useState('')
  const { id } = router.query

  useEffect(() => {
    async function start() {
      const res = await fetch('/api/brand/' + router.query.id, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        },
      })
      if (res.ok) {
        const brandFetch = await res.json()
        console.log(brandFetch);
        setBanner(brandFetch.banner)
        setBrand(brandFetch)
      }
    }
    if (router.isReady) {
      start()
      console.log('start');
    }
  }, [router.isReady]);






  return (
    <>
      <Head>
        <title>АРКОНТ ОФИЦИАЛЬНЫЙ ДИЛЕР</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MenuBarNew setShowModal={setShowModal} />
      <BarMenu />
      <div className='background'>
        <div className='content'>
          {brand &&
            <>
              <BannerBrand brand={brand} />

              <FilterWithPageComponentDynamic setShowModal={setShowModal}
                setShowModalFavorite={setShowModalFavorite}
                cars={cars} brands={brands}
                brand={brand}
              />
            </>
          }
          {!brand &&
            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', width: '100%', height: '100vh' }}>
              <CircularProgress sx={{ fontSize: '50px' }} />
            </Box>
          }
        </div>
      </div >
      <FooterMainNew setShowModal={setShowModal} refs={{ refFooter }} />

      {
        showModal && <Modal showModal={showModal} setShowModal={setShowModal} />
      }

      {
        showTradeInModal && <TradeinModal showTradeInModal={showTradeInModal} setShowTradeInModal={setShowTradeInModal} />
      }

      {
        showModalFavorite && <ModalFavorite showModalFavorite={showModalFavorite} setShowModalFavorite={setShowModalFavorite} cars={cars} />
      }

      <style jsx>
        {` 
          .background {
            display: flex; 
            justify-content: center;
            width: '100%' ;
          }
  
          .content {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 1179px; 
          }

          @media(max-width: 1300px) {
            .content {  
              width: 970px; 
            }
          }

          @media(max-width: 900px) {
            .content{  
              width: 640px; 
            }
          }

          @media(max-width: 640px) {
            .content{  
              width: 450px; 
            }
          }    
          
          @media(max-width: 450px) {
            .content{  
              width: 360px; 
            }
          }

          @media(max-width: 360px) {
            .background {
              padding-left: 10px;
              padding-right: 10px;
            }
            .content{  
              width:90%; 
            }
          }
        `}
      </style>
    </>
  )
}





export const getServerSideProps: GetServerSideProps = async (context) => {
  const id = context.query.id; // Retrieve the id from the query parameters
  const brandId = typeof id === 'string' ? id : id[0]; // Force id to be a string

  try {
    const carsPromise = db.car.findMany({
      where: {
        active: true,
        CarModel: {
          brandName: brandId,
        }
      },
      include: {
        CarModel: true,
        CarComplectation: true,
        CarModification: true,
        extras: true,
        DealerModel: true,
      },
    });

    const brandsWithCountPromise = db.carModel.groupBy({
      by: ['brandName'],
      _count: true,
    });

    const [cars, brandsWithCount] = await Promise.all([
      carsPromise,
      brandsWithCountPromise,
    ]);

    const brands = brandsWithCount.map((item) => ({
      brandName: item.brandName,
      count: item._count,
    }));

    // const geelyCarCount = await db.car.count({
    //   where: {
    //     CarModel: {
    //       brandName: "Geely"
    //     }
    //   },
    // });

    // Устанавливаем заголовки Cache-Control и ETag
    context.res.setHeader('Cache-Control', 'public, max-age=14400,must-revalidate'); // Максимальное время кэширования - 4 часа
    context.res.setHeader('ETag', 'some-unique-value'); // Уникальное значение ETag

    return {
      props: {
        cars: JSON.parse(JSON.stringify(cars)),
        brands: JSON.parse(JSON.stringify(brands)),
      },
    };
  } catch (error) {
    console.error('Error querying the database:', error);
    return {
      props: {
        cars: [],
        brands: []
      },
    };
  }
}


export default BrandPage




