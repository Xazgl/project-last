//@ts-ignore
import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import { MenuBar } from '../../src/component/Menu'
import { Modal } from '../../src/component/Modal'
import { TradeinModal } from '../../src/component/ModalTwo'
import { useRef, useState } from 'react'
import db, { Job } from '../../prisma'
import { QuestionForm } from '../../src/component/actual/QuestionForm'
import { FooterMain } from '../../src/component/actual/FooterMain'
import { MainBanner } from '../../src/component/actual/job/MainBanner'
import { Banner } from '../../src/component/actual/job/Banner'
import { CompanyMini } from '../../src/component/actual/job/CompanyMini'
import { Staff } from '../../src/component/actual/job/Staff'
// import { CardsOffers } from '../../src/component/actual/job/CardsOffersJob(old)'
import BarMenu from '../../src/component/BarMenu'
// import { getDataFromRedis, getRedisInstance } from '../../src/services/redis'
import { CardsOffersNew } from '../../src/component/actual/job/CardsOffersJobNew'
import { MenuBarNew } from '../../src/component/actual/menuNew/Menu'
import { FooterMainNew } from '../../src/component/actual/menuNew/FooterMain'


const JobPage: NextPage<{ job: Job[] }> = ({ job }) => {

  const [showModal, setShowModal] = useState(false)
  const [showTradeInModal, setShowTradeInModal] = useState(false)

  const refSales = useRef<HTMLDivElement>(null)
  const refTop = useRef<HTMLDivElement>(null)
  const refContact = useRef<HTMLDivElement>(null)
  const refAdvatages = useRef<HTMLDivElement>(null)
  const refFooter = useRef<HTMLDivElement>(null)

  return (
    <>
      <Head>
        <title>Работа в АРКОНТ </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MenuBarNew setShowModal={setShowModal} />
      <BarMenu />
      <div className='background'>
        <div className='content'>
          <MainBanner />
          <CardsOffersNew job={job} setShowModal={setShowModal} />
          <Banner setShowModal={setShowModal} />
          <CompanyMini />
          <Staff />

          <QuestionForm />
        </div>
      </div >
      <FooterMainNew setShowModal={setShowModal} refs={{ refFooter }} />

      {
        showModal && <Modal showModal={showModal} setShowModal={setShowModal} />
      }

      {
        showTradeInModal && <TradeinModal showTradeInModal={showTradeInModal} setShowTradeInModal={setShowTradeInModal} />
      }

      <style jsx>
        {` 
          .background {
            display: flex; 
            justify-content: center;
            width: '100%' ;
          }
  
          .content {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 1179px; 
          }

          .title {
            display: flex;
            justify-content: start;
            width: 100%;
            font-family: 'Roboto',sans-serif;
            margin-top: 20px;
            font-size: 25px;
            font-weight: bold;
          }

          @media(max-width: 1300px) {
            .content {  
              width: 970px; 
            }
          }

          @media(max-width: 900px) {
            .content{  
              width: 640px; 
            }
          }

          @media(max-width: 640px) {
            .content{  
              width: 450px; 
            }
            .title {
              justify-content: center;
            }
          }    
          
          @media(max-width: 450px) {
            .content{  
              width: 360px; 
            }
          }

          @media(max-width: 360px) {
            .background {
              padding-left: 10px;
              padding-right: 10px;
            }
            .content{  
              width:90%; 
            }
          }

        `}
      </style>
    </>
  )
}

export default JobPage

// export const getServerSideProps: GetServerSideProps = async (context) => {
//   let job: Job[] = []; // Объявление переменной job
//   try {
//     // Получаем данные из Redis и парсим их в массив объектов
//     const jobData: string = await getDataFromRedis('jobs');
//     if (!jobData) {
//       job = await db.job.findMany({
//         where: {
//           active: true
//         }
//       })
//       // Сохраняем данные в Redis на день
//       getRedisInstance().set('jobs', JSON.stringify(job), 'EX', 14400);
//     } else {
//       job = JSON.parse(jobData) as Job[]; // Преобразование строки в массив объектов типа Car
//     }
//     // Устанавливаем заголовки Cache-Control и ETag
//     context.res.setHeader('Cache-Control', 'public, max-age=14400'); // Максимальное время кэширования - 4 часа
//     context.res.setHeader('ETag', 'some-unique-value'); // Уникальное значение ETag
//     context.res.setHeader('X-XSS-Protection', '1; mode=block');
//     context.res.setHeader('X-Frame-Options', 'SAMEORIGIN');
//     context.res.setHeader('X-Content-Type-Options', 'nosniff');
//     return {
//       props: {
//         job: JSON.parse(JSON.stringify(job)),
//       },
//     };
//   } catch (error) {
//     console.error('Error querying the database:', error);
//     return {
//       props: {
//         job: []
//       },
//     };
//   }
// }



export const getServerSideProps: GetServerSideProps = async (context) => {
  const job = await db.job.findMany({
    where: {
      active: true
    }
  })
  return {
    props: {
      job: JSON.parse(JSON.stringify(job)),
    }
  }
}



