//@ts-ignore
import type { GetServerSideProps, NextPage } from 'next'
import Head from 'next/head'
import { MenuBar } from '../src/component/Menu'
import { Modal } from '../src/component/Modal'
import { TradeinModal } from '../src/component/ModalTwo'
import { useEffect, useRef, useState } from 'react'
import BarMenu from '../src/component/BarMenu'
import db from '../prisma'
// import { useUtm } from '../src/hooks/useUtm'
import { MainCard } from '../src/component/MainCard'
import { Labels } from '../src/component/actual/Labels'
import { QuestionForm } from '../src/component/actual/QuestionForm'
import { FooterMain } from '../src/component/actual/FooterMain'
import { AllCarDto, AllUsedCarDto, CarDtoWithoutFavorite } from '../@types/dto'
import { CarouselComponent } from '../src/component/actual/Carousel'
import { CarouselComponentUsed } from '../src/component/actual/CarouselUsed'
import { SwiperEl } from '../src/component/actual/slider/Swiper'
import { SwiperElUsed } from '../src/component/actual/sliderUsed/SwiperUsed'
import { getDataFromRedis, redisClient } from '../src/services/redis'



const Home: NextPage<{ cars: AllCarDto, carsUsed: AllUsedCarDto }> = ({ cars, carsUsed }) => {

  const [showModal, setShowModal] = useState(false)
  const [showTradeInModal, setShowTradeInModal] = useState(false)

  const refSales = useRef<HTMLDivElement>(null)
  const refTop = useRef<HTMLDivElement>(null)
  const refContact = useRef<HTMLDivElement>(null)
  const refAdvatages = useRef<HTMLDivElement>(null)
  const refFooter = useRef<HTMLDivElement>(null)

  // const [modelName, setModelName] = useState<string>(null)
  // useEffect(() => {
  //   const utm = new URLSearchParams(location.search).get('utm_mdl')
  //   if(utm === 'rio_2022') {
  //     setModelName('Rio')
  //   }
  // }, [])
  // const { utm_mdl } = useUtm(['utm_mdl'])

  const [mobileAdaptive, setMobileAdaptive] = useState(false);

  // Определение количества отображаемых элементов в зависимости от ширины экрана
  useEffect(() => {
    function handleResize() {
      if (window.innerWidth < 768) {
        setMobileAdaptive(true);
      } else {
        setMobileAdaptive(false);
      }
    }
    window.addEventListener("resize", handleResize);
    handleResize();
    return () => window.removeEventListener("resize", handleResize);
  }, [])

  return (
    <>
      <Head>
        <title>АРКОНТ ОФИЦИАЛЬНЫЙ ДИЛЕР В ВОЛГОГРАДЕ</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MenuBar />
      <BarMenu />
      <MainCard />
      <Labels />
      {mobileAdaptive == false ?
        <>
          <SwiperEl cars={cars} />
          <SwiperElUsed carsUsed={carsUsed} />
        </>
        :
        <>
          <CarouselComponent cars={cars} />
          <CarouselComponentUsed carsUsed={carsUsed} />
        </>
      }
      <QuestionForm />
      <FooterMain setShowTradeInModal={setShowTradeInModal} refs={{ refFooter }} />
      {
        showModal && <Modal showModal={showModal} setShowModal={setShowModal} />
      }

      {
        showTradeInModal && <TradeinModal showTradeInModal={showTradeInModal} setShowTradeInModal={setShowTradeInModal} />
      }

    </>
  )
}



export const getServerSideProps: GetServerSideProps = async (context) => {
  let cars: CarDtoWithoutFavorite[] = []; // Объявление переменной cars
  let carsUsed: AllUsedCarDto = []; // Объявление переменной carsUsed
  try {
    // Получаем данные из Redis и парсим их в массив объектов
    const carsData: string = await getDataFromRedis('cars');
    const carsUsedData: string = await getDataFromRedis('carsUsed');
    
    if (!carsData) {
      cars = await db.car.findMany(
        {
          where: {
            active: true,
          },
          include: {
            CarModel: true,
            CarComplectation: true,
            CarModification: true,
            extras: true,
            DealerModel: true,
          },
        }
      );
      // Сохраняем данные в Redis на день
      redisClient.set('cars', JSON.stringify(cars), 'EX', 86400);
    } else {
      cars = JSON.parse(carsData) as CarDtoWithoutFavorite[]; // Преобразование строки в массив объектов типа Car
    }

    if (!carsUsedData) {
      carsUsed = await db.usedCars.findMany({
        where: {
          active: true,
        }
      });
      
      // Сохраняем данные в Redis
      redisClient.set('carsUsed', JSON.stringify(carsUsed), 'EX', 86400);
      (err, reply) => {
        if (err) {
          console.log('Ошибка при записи данных в Redis:', err);
          return;
        }
        console.log('Данные успешно записаны в Redis:', reply);
      }
    } else {
      carsUsed = JSON.parse(carsUsedData) as AllUsedCarDto; // Преобразование строки в массив объектов типа UsedCar
    }
    // Устанавливаем заголовки Cache-Control и ETag
    context.res.setHeader('Cache-Control', 'public, max-age=14400'); // Максимальное время кэширования - 4 часа
    context.res.setHeader('ETag', 'some-unique-value'); // Уникальное значение ETag
    return {
      props: {
        cars,
        carsUsed,
      },
    };
  } catch (error) {
    console.error('Error querying the database:', error);
    return {
      props: {
        cars: [],
        carsUsed: [],
      },
    };
  }
};


export default Home